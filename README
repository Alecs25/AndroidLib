AndroidLib.dll - Written by Dan Wager (regaw_leinad)
Getting Started - v3

Thank you for downloading regaw_leinad's AndroidLib.  This is a quick guide to help you get started using AndroidLib in your .NET Project.
If you decide to use AndroidLib.dll in your .NET project, please give the appropriate credit/references in your application and/or documentation.

Every release of AndroidLib.dll will be signed with a strong name (my private key) which allows anyone to verify that the running version was in fact compiled by me.

ADD REFERENCE:-----------------------------------------------------
Creating a reference to AndroidLib.dll in your project:

1.  Make a new project in Visual Studio. 
2.  Open up the Solution Explorer window.  
3.  Find the item that says "References" and right click it.  
4.  Select "Add Reference".  
5.  Go to "Browse" and select AndroidLib.dll on your computer.

You should now have a reference to AndroidLib.dll in your project.

Next, on any of the source code files you want to use it with, you need to add:
using RegawMOD.Android;
This tells your project to use AndroidLib's default namespace so you can reference everything you need easily from the library.


USAGE:-------------------------------------------------------------
The 'AndroidController' class is the main class in AndroidLib.
The default/recommended name for the 'AndroidController' variable is 'android'.  In version 1.2.0.0, AndroidController was implemented with the Singleton method.
Here is an example how to set up the new 'AndroidController':

AndroidController android = AndroidController.Instance;

Now, 'android' references the static property AndroidController.Instance, which is the active instance of AndroidController.
This was implemented to only allow one instance of AndroidController at a time.

ALWAYS call the android.Dispose() method after you are done using AndroidLib's features.  This kills the Adb Server and cleans up resources left in "%temp%\RMResource".

The 'Device' class is basically a virtual representation of a connected Android device.  It contains many classes that provide the developer information about the device.
You can get an instance of 'Device' by calling any of the 'Get' methods or properties of the 'AndroidController' instance.  For example:

This example shows how to display a connected Android device's serial number on the Console:

using System;
using RegawMOD.Android;

class Program
{
    static void Main(string[] args)
    {
        AndroidController android = AndroidController.Instance;
        Device device;
        string serialNumber;
        
        Console.WriteLine("Waiting For Device...");
        
        //This will wait until a device is connected to the computer
        //Should ONLY be used in Console applications though, as it freezes WinForm apps
        android.WaitForDevice(); 
        
        //Gets first serial number of Device in collection
        serialNumber = android.ConnectedDevices[0];
        
        //New way to set 'device' to the first Device in the collection
        device = android.GetConnectedDevice(serialNumber); 
        
        Console.WriteLine("Connected Device - {0}", device.SerialNumber);
        
        //ALWAYS remember to dispose after use of AndroidController
        android.Dispose();
    }
}

From there, check the documentation for everything you can do within the 'Device' class.

This library is extremely well documented, so make use of it!

NOTES:-------------------------------------------------------------
As of right now, the 'Adb' class is compiled as a public class.  'Adb' contains methods to create and run Adb commands on the server.  I debated whether or not to compile it as internal because it does give the developer great power to generate an error.  I STRONGLY urge you NOT to allow your end-users to be able to create their own 'AdbCommand'.  This leaves huge room for error, because not everone knows how to use Adb.

WARNING:
I have tested everything AndroidLib does to the best of my abilities.  There are bound to be some bugs, as this is the first public release.  PLEASE report all bugs to me either by pm on xda or email: SelmerSaxMan@gmail.com
I can not be held responsible if anything happens to a device or computer while using AndroidLib.dll.  This has been tested without any errors, is still under development, and is completely malware free.